@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Web

<div class="uk-custom-select">
    <button class="uk-input-fake uk-flex uk-flex-between @(Error ? "uk-form-danger" : "")"
            type="button"
            disabled="@Disabled"
            @onclick="Toggle"
            @onkeydown="@(e => HandleKeyDown(e))">
        <span>@DisplayText</span>
        <svg class="opacity-50" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="m7 15 5 5 5-5" />
            <path d="m7 9 5-5 5 5" />
        </svg>
    </button>
    @if (IsOpen)
    {
        <div class="uk-drop uk-dropdown uk-open" tabindex="-1">
            @if (Searchable)
            {
                <div class="uk-custom-select-search">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="11" cy="11" r="8" />
                        <path d="m21 21-4.3-4.3" />
                    </svg>
                    <input placeholder="Search" type="text" @bind="SearchTerm" @bind:event="oninput" @onkeydown="@(e => HandleSearchKeyDown(e))" />
                </div>
            }
            @if (FilteredOptions.Any())
            {
                <hr class="uk-hr" />
                <ul class="uk-dropdown-nav" tabindex="-1">
                    @foreach (var (option, index) in FilteredOptions.Select((o, i) => (o, i)))
                    {
                        @if (option.Type == "label")
                        {
                            <li class="uk-nav-header">@option.Text</li>
                        }
                        else
                        {
                            <li class="@(option.Disabled ? "uk-disabled opacity-50" : "") @(FocusedIndex == index ? "uk-active" : "")"
                                tabindex="-1"
                                @onclick="() => Select(index)">
                                <a tabindex="-1">
                                    <span>@option.Text</span>
                                    @if (Selected.Contains(option.Value))
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M20 6 9 17l-5-5" />
                                        </svg>
                                    }
                                </a>
                            </li>
                        }
                    }
                </ul>
            }
        </div>
    }
    @if (!string.IsNullOrEmpty(Name) && Selected.Any())
    {
        @if (!Multiple)
        {
            <input name="@Name" type="hidden" value="@Selected.First()" />
        }
        else
        {
            @foreach (var value in Selected)
            {
                <input name="@(Name + "[]")" type="hidden" value="@value" />
            }
        }
    }
</div>

@code {
    [Parameter] public string Name { get; set; } = "";
    [Parameter] public bool Multiple { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Placeholder { get; set; } = "";
    [Parameter] public bool Searchable { get; set; }
    [Parameter] public bool Error { get; set; }
    [Parameter] public string I18n { get; set; } = "";
    [Parameter] public EventCallback<List<string>> OnSelectionChanged { get; set; }
    [Parameter] public List<SelectOption> Options { get; set; } = new List<SelectOption>();

    private string SearchTerm = "";
    private List<SelectOption> FilteredOptions => Options.Where(o => o.Text.ToLower().Contains(SearchTerm.ToLower())).ToList();
    private List<string> Selected = new List<string>();
    private int FocusedIndex = -1;
    private bool IsOpen = false;

    private Dictionary<string, string> I18nDictionary = new Dictionary<string, string>
    {
        { "selection-count-text", ":n: options selected" }
    };

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(I18n))
        {
            // Parse I18n string and update I18nDictionary
            var pairs = I18n.Split(',');
            foreach (var pair in pairs)
            {
                var keyValue = pair.Split(':');
                if (keyValue.Length == 2)
                {
                    I18nDictionary[keyValue[0].Trim()] = keyValue[1].Trim();
                }
            }
        }

        // Initialize selected values
        Selected = Options.Where(o => o.Selected).Select(o => o.Value).ToList();
    }

    private string DisplayText
    {
        get
        {
            if (!Selected.Any())
                return !string.IsNullOrEmpty(Placeholder) ? Placeholder : "Select an option";

            if (!Multiple)
                return Options.FirstOrDefault(o => o.Value == Selected.First())?.Text ?? "";

            if (Selected.Count == 1)
                return Options.FirstOrDefault(o => o.Value == Selected.First())?.Text ?? "";

            return I18nDictionary["selection-count-text"].Replace(":n:", Selected.Count.ToString());
        }
    }

    private void Toggle()
    {
        if (Options.Any())
            IsOpen = !IsOpen;
    }

    private bool HandleKeyDown(KeyboardEventArgs e)
    {
        if (!IsOpen)
        {
            if (e.Key == "ArrowDown" || e.Key == "ArrowUp")
            {
                IsOpen = true;
                FocusedIndex = Navigate(e.Key == "ArrowDown" ? "down" : "up");
                return true;
            }
        }
        else
        {
            switch (e.Key)
            {
                case "Escape":
                    IsOpen = false;
                    return true;
                case "ArrowDown":
                    FocusedIndex = Navigate("down");
                    return true;
                case "ArrowUp":
                    FocusedIndex = Navigate("up");
                    return true;
                case "Enter":
                case " ":
                    Select(FocusedIndex);
                    return true;
                case "Tab":
                    if (!Searchable)
                        IsOpen = false;
                    break;
            }
        }
        return false;
    }

    private bool HandleSearchKeyDown(KeyboardEventArgs e)
    {
        if (IsOpen)
        {
            switch (e.Key)
            {
                case "Escape":
                    IsOpen = false;
                    return true;
                case "ArrowDown":
                    FocusedIndex = Navigate("down");
                    return true;
                case "ArrowUp":
                    FocusedIndex = Navigate("up");
                    return true;
                case "Enter":
                    Select(FocusedIndex);
                    return true;
                case "Tab":
                    if (!e.AltKey && !e.ShiftKey && !e.CtrlKey && !e.MetaKey)
                        IsOpen = false;
                    break;
            }
        }
        return false;
    }

    private int Navigate(string direction)
    {
        int step = direction == "up" ? -1 : 1;
        int newIndex = FocusedIndex;

        do
        {
            newIndex += step;
            if (newIndex < 0)
                newIndex = FilteredOptions.Count - 1;
            else if (newIndex >= FilteredOptions.Count)
                newIndex = 0;
        }
        while (FilteredOptions[newIndex].Type == "label" || FilteredOptions[newIndex].Disabled);

        return newIndex;
    }

    private void Select(int index)
    {
        if (index == -1 || index >= FilteredOptions.Count)
            return;

        var option = FilteredOptions[index];
        if (option.Type == "label" || option.Disabled)
            return;

        if (!Multiple)
        {
            Selected = new List<string> { option.Value };
            IsOpen = false;
        }
        else
        {
            if (Selected.Contains(option.Value))
                Selected.Remove(option.Value);
            else
                Selected.Add(option.Value);
        }

        StateHasChanged();
        OnSelectionChanged.InvokeAsync(Selected);
    }

    public List<string> GetSelectedValues()
    {
        return new List<string>(Selected);
    }

    public class SelectOption
    {
        public string Type { get; set; } = "option";
        public string Value { get; set; } = "";
        public string Text { get; set; } = "";
        public bool Disabled { get; set; }
        public string Group { get; set; }
        public bool Selected { get; set; }
    }
}
